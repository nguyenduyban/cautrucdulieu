* SELECTION SORT
Sắp xếp danh sách theo thứ tự tăng dần.
Giải thuật: 
Cho i chạy từ 0 đến (n-1)
Bước 1: Tìm pos là vị trí của phần tử nhỏ
nhất trong danh sách (ai, ai+1, …, an-1)
Bước 2: Hoán vị giá trị hai phần tử tại
vị trí i và vị trí pos
Cuối i

VÍ DỤ : 
void swap(int &a, int &b)
{
    int temp = a;
    a = b;
    b = temp;
}
void selectionSort(int a[], int n)
{
    for (int i = 0; i < n - 1; i++)
    {
       
        int min = i;
        for (int j = i + 1; j < n; j++)
        {
            if (a[j] > a[min])
                min = j;
        }
        swap(a[min], a[i]);
        for (int k = 0; k < n; k++)
            cout << a[k] << " ";
        cout << endl;
___________________________
* INSERTION SORT 
Sắp xếp danh sách theo thứ tự tăng dần.
Giải thuật: 
Cho i chạy từ 0 đến (n-1)
gán biến tạm bằng giá trị của i (tam= ai)
Cho j chạy từ (i-1) đến 0
Nếu aj > tam thì aj+1 = aj
Ngược lại kết thúc vòng lặp j
Cuối j
aj+1 = tam
Cuối i

ví dụ : 
void insertionSort(int a[], int n)
{
    for (int i = 1; i < n; i++)
    {
        int j = i;
        while (j > 0 && a[j] > a[j - 1])
        {
            swap(a[j], a[j - 1]);
            j--;
        }
        // In ra mảng sau mỗi lần sắp xếp
        for (int k = 0; k < n; k++)
            cout << a[k] << " ";
        cout << endl;
    }
}
________________________________
*BUBBLE SORT 
Sắp xếp danh sách  theo thứ tự      tăng dần.
Giải thuật: 
Cho i chạy từ n đến 1
Cho j chạy từ 1 đến (i-1)
Nếu aj-1 > aj thì
Hoán vị giá trị hai phần tử aj và
aj-1
Cuối j
Cuối i

----------------------
HÀNG ĐỢI
 void enQueue(Queue &q, int x)
{
    Nodeptr newNode = (Nodeptr)malloc(sizeof(Node)); 
    //malloc là hàm cấp phát động nhận vào một số nguyên là kích thước cần cấp phát và trả về con trỏ đến vùng nhớ đã được cấp phát.
    //sizeof(Node) trả về kích thước của kiểu dữ liệu Node
    newNode->data = x;
    newNode->next = NULL;

    if (q.front == NULL)
    {
        q.front = newNode;
        q.rear = newNode;
    }
    else
    {
        q.rear->next = newNode;
        q.rear = newNode;
    }
}
---
int deQueue(Queue &q)
{
    if (q.front == NULL)
    {
        cout << "Queue is empty" << endl;
        return -1;
    }
    Nodeptr temp = q.front;
    q.front = q.front->next;
    if (q.front == NULL)
        q.rear = NULL;
    int x = temp->data;
    free(temp);
    return x;
}
-----
int Getfront(Queue q)
{
    if (q.front == NULL)
    {
        cout << "Queue is empty" << endl;
        return -1;
    }
    return q.front->data;
}
___________________________
Ngăn 
void pushStack(Stack &s, int x)
{
    Nodeptr newNode = (Nodeptr)malloc(sizeof(Node));
    newNode->data = x;
    newNode->next = s.top;
    s.top = newNode;
}
----
int popStack(Stack &s)
{
    if (s.top == NULL)
    {
        cout << "Stack is empty" << endl;
        return -1;
    }
    Nodeptr temp = s.top;
    s.top = s.top->next;
    int x = temp->data;
    free(temp);
    return x;
}
-----
int topElement(Stack s)
{
    if (s.top == NULL)
    {
        cout << "Stack is empty" << endl;
        return -1;
    }
    return s.top->data;
}
-------------------------
câu 4 
cấu trúc dslkep
a)
struct Node
{
    char data; // kiểu thực thì thay char thành float
    Node *prev;
    Node *next;
};

typedef Node *Nodeptr;
struct list {
    Nodeptr head  // đầu
    Nodeptr tail // cuối
};
b)// Hàm thêm vào đầu danh sách liên kết kép
void themdau(list &ds, char x) // kiểu thực thì thay char thành float
{
    Nodeptr newNode = new Node;
    newNode->data = x;
    newNode->prev = NULL;
    newNode->next = ds.head;

    if (ds.head != NULL){
        ds.head->prev = newNode;
        }
          ds.head = newNode;
}
___________
cấu trúc dslk vòng
a ) 
struct Node {
    char data; //Kiểu thực thì thay char thành float
    Node *next;
};

typedef Node *Nodeptr;
struct list {
    Nodeptr head  // đầu
    Nodeptr tail // cuối
};

b)
void th(list & ds, char x) {//Kiểu thực thì thay char thành float
    Nodeptr new_node = new Node;
    new_node->data = x; 
    new_node->next = ds.head;
    ds.head = new_node;
}
______________________
5
bool:  giá trị

char: ký tự.

int: số nguyên.

float: số thực vs số thập phân tùy ý

double: số thập phân tùy ý, nhưng có số lượng chữ số thập phân nhiều hơn so với kiểu float.

string: chuỗi ký tự.
